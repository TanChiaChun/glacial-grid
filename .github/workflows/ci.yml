name: CI
on: push
jobs:
  python:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: './poetry/pyproject.toml'
      - name: Get Python version
        run: python --version
      - name: Install Poetry
        run: |
          pip install poetry
          poetry --version
      - name: Create venv
        shell: bash
        run: |
          source ./git-hooks/src/py.sh
          create_project_venv
      - name: Poetry install packages
        shell: bash
        run: |
          source ./git-hooks/src/py.sh
          activate_project_venv_bash
          poetry install --no-root --directory='./poetry/pyproject.toml'
          python -m django --version
      - name: pip install packages
        shell: bash
        run: |
          source ./git-hooks/src/py.sh
          activate_project_venv_bash
          pip install --requirement ./requirements-dev.txt
          black --version
          pylint --version
          mypy --version
          isort --version
      - name: Install Bash (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install bash
      - name: Get Bash version
        run: bash --version
      - name: Run Black
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          activate_project_venv_bash
          run_ci_python_black
      - name: Run Pylint
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          activate_project_venv_bash
          run_ci_python_pylint
      - name: Run mypy
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          activate_project_venv_bash
          run_ci_python_mypy
      - name: Run isort
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          activate_project_venv_bash
          run_ci_python_isort
      - name: Run unittest
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          activate_project_venv_bash
          run_ci_python_unittest
  markdown:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Install markdownlint
        run: |
          npm install --global markdownlint-cli
          markdownlint --version
      - name: Install Bash (macOS)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew update
          brew install bash
      - name: Get Bash version
        run: bash --version
      - name: Run markdownlint
        shell: bash
        run: |
          source ./git-hooks/src/ci.sh
          run_ci_markdown
